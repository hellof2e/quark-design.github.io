import{c as s,o as a,a as e}from"./vue.ac8d90f1.js";const d={class:"markdown-body"},o=e(`<h1>Toast</h1><h3>Intro</h3><p>Black semi-transparent pop-up hint in the middle of the page, used for message notification, loading hint, operation result hint and other scenarios.</p><h3>Install</h3><pre><code class="language-tsx"><span class="hljs-keyword">import</span> Toast <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;quarkd/lib/toast&#39;</span>;
</code></pre><h3>Text</h3><pre><code class="language-javascript">Toast.text(<span class="hljs-string">&#39;Network failed, please try again later~&#39;</span>);
</code></pre><h3>Success</h3><pre><code class="language-javascript">Toast.success(<span class="hljs-string">&#39;Success&#39;</span>);
</code></pre><h3>Fail</h3><pre><code class="language-javascript">Toast.error(<span class="hljs-string">&#39;Fail&#39;</span>);
</code></pre><h3>Warning</h3><pre><code class="language-javascript">Toast.warning(<span class="hljs-string">&#39;warning&#39;</span>);
</code></pre><h3>Loading</h3><pre><code class="language-javascript">Toast.loading(<span class="hljs-string">&#39;Loading&#39;</span>);
</code></pre><h3>Toast not disappear</h3><pre><code class="language-javascript">Toast.text(msg,{
    <span class="hljs-attr">duration</span>:<span class="hljs-number">0</span>
});
</code></pre><h3>Tabbed Call</h3><p>Custom loading content</p><pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">quark-toast</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#39;tag&#39;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">quark-loading</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#39;circular&#39;</span>/&gt;</span> Restoring open orders
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">quark-toast</span>&gt;</span>
</code></pre><h3>Close Manually</h3><p>Call the <code>hide</code> method.</p><pre><code class="language-tsx">Toast.hide().
<span class="hljs-comment">// or use ths instance.</span>
<span class="hljs-keyword">const</span> toast = Toast.loading(<span class="hljs-string">&#39;use in js module&#39;</span>);
toast.hide();
</code></pre><h3>Close Callback Function</h3><pre><code class="language-tsx">QuarkToast.test(<span class="hljs-string">&#39;Network failed, please try again later~&#39;</span>, {
    <span class="hljs-attr">close</span>: <span class="hljs-function">() =&gt;</span> alert(<span class="hljs-string">&#39;hello&#39;</span>)
});
</code></pre><h3>Singleton</h3><p>Toast use singleton mode by default, if you need to pop multiple Toast at the same time, you can refer to the following example:</p><pre><code class="language-tsx">Toast.allowMultiple();
<span class="hljs-keyword">const</span> toast1 = Toast.text(<span class="hljs-string">&#39;first Toast&#39;</span>);
<span class="hljs-keyword">const</span> toast2 = Toast.success(<span class="hljs-string">&#39;second Toast&#39;</span>);
toast1.hide();
toast2.hide();
</code></pre><h2>API</h2><h3>Props</h3><table><thead><tr><th>Methods</th><th>Description</th><th>Attribute</th><th>Return value</th></tr></thead><tbody><tr><td>Toast.text</td><td>Show text toast</td><td>message \uFF5C <code>ToastOptions</code></td><td>toast instance(message supports incoming HTML)</td></tr><tr><td>Toast.success</td><td>Show success toast</td><td>message \uFF5C <code>ToastOptions</code></td><td>toast instance</td></tr><tr><td>Toast.error</td><td>Show fail toast</td><td>message \uFF5C <code>ToastOptions</code></td><td>toast instance</td></tr><tr><td>Toast.warning</td><td>Show warning toast</td><td>message \uFF5C <code>ToastOptions</code></td><td>toast instance</td></tr><tr><td>Toast.hide</td><td>Close toast</td><td>-</td><td>void</td></tr><tr><td>Toast.loading</td><td>Show loading toast</td><td>message \uFF5C <code>ToastOptions</code></td><td>toast instance</td></tr><tr><td>Toast.allowMultiple</td><td>open multiple toast</td><td>-</td><td>toast instance</td></tr></tbody></table><h3>Options</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>duration</td><td>Toast duration(ms), won\u2019t disappear if value is 0</td><td><code>number</code></td><td><code>2000ms</code></td></tr><tr><td>size</td><td>Custom icon size</td><td><code>number</code></td><td><code>40px</code></td></tr><tr><td>zIndex</td><td>Custom zIndex</td><td><code>number</code></td><td><code>9999</code></td></tr><tr><td>close</td><td>Callback function after close</td><td><code>()=&gt;void</code></td><td>-</td></tr></tbody></table><h2>CSS Variables</h2><table><thead><tr><th>Name</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><code>--toast-min-width</code></td><td>Minimum width</td><td><code>120px</code></td></tr><tr><td><code>--toast-max-width</code></td><td>Maximum width</td><td><code>240px</code></td></tr><tr><td><code>--toast-text-padding</code></td><td>Padding</td><td><code>24px 16px</code></td></tr><tr><td><code>--toast-font-size</code></td><td>Font size</td><td><code>14px</code></td></tr><tr><td><code>--toast-color</code></td><td>Font color</td><td><code>#fff</code></td></tr></tbody></table>`,35),n=[o],i={__name:"doc.en-US",setup(c,{expose:t}){return t({frontmatter:{}}),(r,p)=>(a(),s("div",d,n))}};export{i as default};
